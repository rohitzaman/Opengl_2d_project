//Basic QUADS
#include <windows.h>
#include <GL/glut.h>

#include <math.h>
#define PI 3.1416

static float	tx	=  0.0;
static float	ty	=  0.0;

void circle(float radius_x, float radius_y)
{
	int i=0;
	float angle = 0.0;

	glBegin(GL_POLYGON);

		for(i = 0; i < 100; i++)
		{
			angle = 2 * PI * i / 100;
			glVertex2f (cos(angle) * radius_x, sin(angle) * radius_y);
			//glVertex2f (cos(angle) * radius_x+5, sin(angle) * radius_y);
		}

	glEnd();
}



void init()
{
    glClearColor(0.0f, 0.0f, 0.0f, 0.0f);
    glOrtho(0,28,0,21,-15,15);
}
void myDisplay()
{
    glClear(GL_COLOR_BUFFER_BIT);

   /* glLineWidth(2.5);          //Line drawing
    glColor3f(1.0, 0.0, 0.0);
    glBegin(GL_LINES);
    glVertex3f(0.0, 0.0, 0.0);
    glVertex3f(4.0, 0.0, 0.0);
    glEnd();*/



    glColor3f(0.0f, 0.0f, 1.0f);
    glBegin(GL_QUADS);
        glVertex3f(0.0, 21.0, 0.0);
        glVertex3f(5.0, 16.0, 0.0);
        glVertex3f(23.0, 16.0, 0.0);
        glVertex3f(28.0, 21.0, 0.0);
    glEnd();

    glColor3f(1.0f, 0.0f, 0.0f);
    glBegin(GL_QUADS);
        glVertex3f(0.0, 21.0, 0.0);
        glVertex3f(0.0, 0.0, 0.0);
        glVertex3f(5.0, 5.0, 0.0);
        glVertex3f(5.0, 16.0, 0.0);
    glEnd();

        glColor3f(0.0f, 0.0f, 1.0f);
    glBegin(GL_QUADS);
        glVertex3f(0.0, 0.0, 0.0);
        glVertex3f(28.0, 0.0, 0.0);
        glVertex3f(23.0, 5.0, 0.0);
        glVertex3f(5.0, 5.0, 0.0);
    glEnd();

    glColor3f(1.0f, 0.0f, 0.0f);
    glBegin(GL_QUADS);
        glVertex3f(23.0, 16.0, 0.0);
        glVertex3f(23.0, 5.0, 0.0);
        glVertex3f(28.0, 0.0, 0.0);
        glVertex3f(28.0, 21.0, 0.0);
    glEnd();

    glColor3f(1.0f, 1.0f, 1.0f);
    glBegin(GL_QUADS);
        glVertex3f(0.0, 10.0, 0.0);
        glVertex3f(2.0, 11.0, 0.0);
        glVertex3f(2.0, 14.0, 0.0);
        glVertex3f(0.0, 15.0, 0.0);
    glEnd();
    glColor3f(0.0f, 0.0f, 0.0f);
    glBegin(GL_QUADS);
        glVertex3f(0.0, 10.0, 0.0);
        glVertex3f(2.0, 11.0, 0.0);
        glVertex3f(2.0, 11.2, 0.0);
        glVertex3f(0.0, 10.2, 0.0);
    glEnd();

    glColor3f(0.0f, 0.0f, 0.0f);
    glBegin(GL_QUADS);
        glVertex3f(2.0, 11.0, 0.0);
        glVertex3f(2.0, 14.0, 0.0);
        glVertex3f(1.8, 14.0, 0.0);
        glVertex3f(1.8, 11.0, 0.0);
    glEnd();

    glColor3f(0.0f, 0.0f, 0.0f);
    glBegin(GL_QUADS);
        glVertex3f(0.0, 15.0, 0.0);
        glVertex3f(0.0, 14.8, 0.0);
        glVertex3f(2, 13.8, 0.0);
        glVertex3f(2, 14.0, 0.0);
    glEnd();


    glColor3f(0.0f, 0.0f, 0.0f);
    glBegin(GL_QUADS);
        glVertex3f(1.1, 10.7, 0.0);
        glVertex3f(1.2, 10.8, 0.0);
        glVertex3f(1.2, 14.3, 0.0);
        glVertex3f(1.1, 14.2, 0.0);
    glEnd();

    glColor3f(0.0f, 0.0f, 0.0f);
    glBegin(GL_QUADS);
        glVertex3f(0.4, 10.2, 0.0);
        glVertex3f(0.5, 10.3, 0.0);
        glVertex3f(0.5, 14.8, 0.0);
        glVertex3f(0.4, 14.7, 0.0);
    glEnd();


    glColor3f(0.0f, 1.0f, 1.0f);
    glBegin(GL_QUADS);
        glVertex3f(6.0, 4.0, 0.0);
        glVertex3f(7.0, 4.0, 0.0);
        glVertex3f(7.0, 8.0, 0.0);
        glVertex3f(6.0, 8.0, 0.0);
    glEnd();
    glColor3f(0.0f, 1.0f, 1.0f);
    glBegin(GL_QUADS);
        glVertex3f(11.0, 4.0, 0.0);
        glVertex3f(12.0, 4.0, 0.0);
        glVertex3f(12.0, 8.0, 0.0);
        glVertex3f(11.0, 8.0, 0.0);
    glEnd();
    glColor3f(0.0f, 1.0f, 1.0f);
    glBegin(GL_QUADS);
        glVertex3f(6.0, 8.0, 0.0);
        glVertex3f(12.0, 8.0, 0.0);
        glVertex3f(12.0, 9.0, 0.0);
        glVertex3f(6.0, 9.0, 0.0);
    glEnd();



    glColor3f(0.0f, 1.0f, 1.0f);
    glBegin(GL_QUADS);
        glVertex3f(0.0, 1.0, 0.0);
        glVertex3f(19.0, 1.0, 0.0);
        glVertex3f(18.0, 3.0, 0.0);
        glVertex3f(2.0, 3.0, 0.0);
    glEnd();
    glColor3f(0.0f, 0.0f, 0.0f);
    glBegin(GL_QUADS);
        glVertex3f(0.0, 0.8, 0.0);
        glVertex3f(19.0, 0.8, 0.0);
        glVertex3f(19.0, 1.0, 0.0);
        glVertex3f(0.0, 1.0, 0.0);
    glEnd();
    glColor3f(0.0f, 1.0f, 1.0f);
    glBegin(GL_QUADS);
        glVertex3f(0.0, 0.0, 0.0);
        glVertex3f(1.0, 0.0, 0.0);
        glVertex3f(1.0, 0.8, 0.0);
        glVertex3f(0.0, 0.8, 0.0);
    glEnd();
    glColor3f(0.0f, 1.0f, 1.0f);
    glBegin(GL_QUADS);
        glVertex3f(18.0, 0.0, 0.0);
        glVertex3f(19.0, 0.0, 0.0);
        glVertex3f(19.0, 0.8, 0.0);
        glVertex3f(18.0, 0.8, 0.0);
    glEnd();

    //board
    glColor3f(0.5f, 0.5f, 0.5f);
    glBegin(GL_QUADS);
        glVertex3f(6.5, 14.5, 0.0);
        glVertex3f(6.5, 9.5, 0.0);
        glVertex3f(18.5, 9.5, 0.0);
        glVertex3f(18.5, 14.5, 0.0);
    glEnd();
    glColor3f(1.0f, 1.0f, 1.0f);
    glBegin(GL_QUADS);
        glVertex3f(7.0, 14.0, 0.0);
        glVertex3f(7.0, 10.0, 0.0);
        glVertex3f(18.0, 10.0, 0.0);
        glVertex3f(18.0, 14.0, 0.0);
    glEnd();


    glPushMatrix();
    glTranslatef(tx,ty,0);
    //teacher
    //head
    glColor3f(1.0f, 0.3f, 1.0f);
    glBegin(GL_QUADS);
        glVertex3f(18.0, 12.0, 0.0);
        glVertex3f(18.0, 11.0, 0.0);
        glVertex3f(19.0, 11.0, 0.0);
        glVertex3f(19.0, 12.0, 0.0);
    glEnd();





    //body
    glEnd();
    glColor3f(0.3f, 0.3f, 0.3f);
    glBegin(GL_QUADS);
        glVertex3f(17.0, 11.0, 0.0);
        glVertex3f(17.0, 8.0, 0.0);
        glVertex3f(20.0, 8.0, 0.0);
        glVertex3f(20.0, 11.0, 0.0);
    glEnd();
    //hand
    glColor3f(0.3f, 0.3f, 0.3f);
    glBegin(GL_QUADS);
        glVertex3f(16.0, 11.0, 0.0);
        glVertex3f(16.0, 10.0, 0.0);
        glVertex3f(17.0, 10.0, 0.0);
        glVertex3f(17.0, 11.0, 0.0);
    glEnd();
    glColor3f(0.3f, 0.3f, 0.3f);
    glBegin(GL_POLYGON);
        glVertex3f(15.0, 10.0, 0.0);
        glVertex3f(15.0, 9.0, 0.0);
        glVertex3f(16.0, 9.0, 0.0);
        glVertex3f(16.0, 11.0, 0.0);
    glEnd();
    glColor3f(1.0f, 1.0f, 1.0f);
    glBegin(GL_QUADS);
        glVertex3f(15.0, 9.0, 0.0);
        glVertex3f(15.0, 8.0, 0.0);
        glVertex3f(16.0, 8.0, 0.0);
        glVertex3f(16.0, 9.0, 0.0);
    glEnd();
    glColor3f(0.3f, 0.3f, 0.3f);
    glBegin(GL_POLYGON);
        glVertex3f(21.0, 11.0, 0.0);
        glVertex3f(20.0, 11.0, 0.0);
        glVertex3f(20.0, 10.0, 0.0);
        glVertex3f(21.0, 10.0, 0.0);
        glVertex3f(22.0, 11.0, 0.0);
        glVertex3f(22.0, 12.0, 0.0);
        glVertex3f(21.0, 12.0, 0.0);
    glEnd();
    glColor3f(1.0f, 1.0f, 1.0f);
    glBegin(GL_QUADS);
        glVertex3f(21.0, 13.0, 0.0);
        glVertex3f(21.0, 12.0, 0.0);
        glVertex3f(22.0, 12.0, 0.0);
        glVertex3f(22.0, 13.0, 0.0);
    glEnd();
    //leg
    glColor3f(0.7f, 0.7f, 0.7f);
    glBegin(GL_QUADS);
        glVertex3f(17.0, 8.0, 0.0);
        glVertex3f(17.0, 7.0, 0.0);
        glVertex3f(20.0, 7.0, 0.0);
        glVertex3f(20.0, 8.0, 0.0);
    glEnd();
    glColor3f(0.7f, 0.7f, 0.7f);
    glBegin(GL_QUADS);
        glVertex3f(17.0, 7.0, 0.0);
        glVertex3f(17.0, 4.0, 0.0);
        glVertex3f(18.0, 4.0, 0.0);
        glVertex3f(18.0, 7.0, 0.0);
    glEnd();
    glColor3f(0.7f, 0.7f, 0.7f);
    glBegin(GL_QUADS);
        glVertex3f(19.0, 7.0, 0.0);
        glVertex3f(19.0, 4.0, 0.0);
        glVertex3f(20.0, 4.0, 0.0);
        glVertex3f(20.0, 7.0, 0.0);
    glEnd();

    glTranslatef(18.5,12.5,0);
    glColor3f(1.0f, 0.3f, 1.0f);
	circle(1,1);


    glPopMatrix();

    /*

    */

    glFlush();
}
void spe_key(int key, int x, int y)
{

	switch (key) {

		case GLUT_KEY_LEFT:
				tx -=2;
				glutPostRedisplay();
				break;

		case GLUT_KEY_RIGHT:
				tx +=2;
				glutPostRedisplay();
				break;

        case GLUT_KEY_DOWN:
				ty -=2;
				glutPostRedisplay();
				break;

		case GLUT_KEY_UP:
				ty +=2;
				glutPostRedisplay();
				break;
	  default:
			break;
	}
}

int main()
{
    glutInitWindowSize(600,600);
    glutInitWindowPosition(200,100);
    glutCreateWindow("srz");
    init();
    glutDisplayFunc(myDisplay);

    glutSpecialFunc(spe_key);
    glutMainLoop();
    return 0;
}
